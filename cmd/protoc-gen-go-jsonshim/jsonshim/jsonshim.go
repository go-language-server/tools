// Copyright 2020 The Go Language Server Authors
// SPDX-License-Identifier: BSD-3-Clause

// Package jsonshim generates MarshalJSON() and UnmarshalJSON() functions from the Protocol Buffers definition types.
package jsonshim

import (
	"path/filepath"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/types/pluginpb"
)

// SupportedFeatures reports the set of supported protobuf language features.
var SupportedFeatures = uint64(pluginpb.CodeGeneratorResponse_FEATURE_PROTO3_OPTIONAL)

const (
	protojsonPackage = protogen.GoImportPath("google.golang.org/protobuf/encoding/protojson")
)

// GenerateFile generates MarshalJSON() and UnmarshalJSON() function into _jsonshim.pb.go file.
func GenerateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	filename := file.GeneratedFilenamePrefix + "_jsonshim.pb.go"

	g := gen.NewGeneratedFile(filename, file.GoImportPath)

	// write license headers
	for _, loc := range file.Proto.GetSourceCodeInfo().GetLocation() {
		for _, s := range loc.GetLeadingDetachedComments() {
			g.P(protogen.Comments(s))
			g.P()
		}
	}

	g.P(`// Code generated by protoc-gen-go-jsonshim. DO NOT EDIT.`)
	g.P()
	g.P(`package `, file.GoPackageName)
	g.P()

	basename := strings.TrimSuffix(filepath.Base(file.Desc.Path()), ".proto")
	marshaler := basename + "Marshaler"
	unmarshaler := basename + "Unmarshaler"

	// write out globals
	g.P(`var (`)
	g.P(marshaler, `= &`, protojsonPackage.Ident("MarshalOptions"), `{}`)
	g.P(unmarshaler, `= &`, protojsonPackage.Ident("UnmarshalOptions"), `{}`)
	g.P(`)`)

	for _, msg := range file.Messages {
		if msg.Desc == nil || msg.Desc.IsMapEntry() {
			continue
		}
		typeName := msg.Desc.Name()
		reciever := strings.ToLower(string(typeName[0]))

		// Generate MarshalJSON() method for this type
		g.P(`// MarshalJSON is a custom marshaler for `, typeName, `.`)
		g.P(`func (`, reciever, ` *`, typeName, `) MarshalJSON() ([]byte, error) {`)
		g.P(`str, err :=`, marshaler, `.Marshal(`, reciever, `)`)
		g.P(`return []byte(str), err`)
		g.P(`}`)

		// Generate UnmarshalJSON() method for this type
		g.P(`// UnmarshalJSON is a custom unmarshaler for `, typeName, `.`)
		g.P(`func (`, reciever, ` *`, typeName, `) UnmarshalJSON(data []byte) error {`)
		g.P(`return `, unmarshaler, `.Unmarshal(data, `, reciever, `)`)
		g.P(`}`)
	}

	return g
}
